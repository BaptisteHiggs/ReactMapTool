{"version":3,"sources":["utils/FetchPolygonData.js","constants.js","utils/urlVariableUtils.js","components/DataTable/utils.js","components/DataTable/Table.js","components/DataTable/constants.js","components/MapContainer/MapContainer.js","utils/ValidateToken.js","components/AccessTokenCheck/AccessTokenCheck.js","index.js"],"names":["FetchPolygonData","async","polygon","body","coords","concat","map","point","lat","toString","lng","join","console","log","encodeURIComponent","buildOverpassQueryBody","response","axios","post","data","ACCESS_TOKEN","GetURLVariable","key","urlVariableString","window","location","search","length","charAt","variableStrings","substring","split","str","keyValPair","NewRow","keys","Object","fromEntries","k","DataTable","_ref","height","setHeight","useState","width","setWidth","taggedData","_data$elements$filter","_data$elements","elements","filter","e","tags","GetTaggedData","tagKeys","element","includes","push","GetTagKeys","rowData","setRowData","rows","row","tagKey","GetRowsFromTaggedData","colDefs","setColDefs","field","React","createElement","className","style","resize","AgGridReact","columnDefs","Map","ReactMapboxGl","accessToken","MapContainer","promisedData","setPromisedData","dataLoading","setDataLoading","setData","useEffect","getData","Draggable","padding","containerStyle","DrawControl","onDrawCreate","features","geometry","coordinates","onDrawUpdate","_ref2","controls","line_string","trash","combine_features","uncombine_features","onDrawModeChange","validateToken","token","username","url","fetch","json","number","status","sendApiRequest","TokenInput","value","setValue","SetURLVariable","getValidity","htmlFor","type","id","onChange","event","target","App","tokenValid","setTokenValid","tokenValidResult","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec197df1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nasync function FetchPolygonData(polygon) {\r\n  const url = \"https://overpass-api.de/api/interpreter\";\r\n  const body = buildOverpassQueryBody(polygon);\r\n  console.log(body);\r\n  const response = await axios.post(url, body);\r\n  console.log(response);\r\n  return response.data;\r\n}\r\n\r\nfunction buildOverpassQueryBody(polygon) {\r\n  const coords = `poly:\"${polygon\r\n    .map((point) => `${point.lat.toString()} ${point.lng.toString()}`)\r\n    .join(\" \")}\"`;\r\n\r\n  console.log(coords);\r\n\r\n  const body =\r\n    \"data=\" +\r\n    encodeURIComponent(`\r\n    [out:json][timeout:30];\r\n    node(${coords});\r\n    way(${coords});\r\n    (._;>;);\r\n    out;\r\n`);\r\n\r\n  return body;\r\n}\r\n\r\nexport default FetchPolygonData;\r\n","export const ACCESS_TOKEN = \"accessToken\";\r\n","export function GetURLVariable(key) {\r\n  const urlVariableString = window.location.search;\r\n  if (urlVariableString.length < 1 || urlVariableString.charAt(0) !== \"?\") {\r\n    return \"\";\r\n  } else {\r\n    const variableStrings = urlVariableString.substring(1).split(\"&\");\r\n    for (const str of variableStrings) {\r\n      const keyValPair = str.split(\"=\");\r\n      if (keyValPair[0] === key) {\r\n        return keyValPair[1];\r\n      }\r\n    }\r\n    return \"\";\r\n  }\r\n}\r\n\r\nexport function SetURLVariable(key, value) {\r\n  window.location.search = `${key}=${value}`;\r\n}\r\n","export function GetTaggedData(data) {\r\n  return data?.elements?.filter((e) => !!e.tags) ?? [];\r\n}\r\n\r\nexport function GetTagKeys(taggedData) {\r\n  const tagKeys = [];\r\n  for (const element of taggedData) {\r\n    const keys = Object.keys(element.tags);\r\n    for (const key of keys) {\r\n      if (!tagKeys.includes(key)) tagKeys.push(key);\r\n    }\r\n  }\r\n  return tagKeys;\r\n}\r\n\r\nexport function GetRowsFromTaggedData(keys, data) {\r\n  const rows = [];\r\n  for (const element of data) {\r\n    const row = NewRow(keys);\r\n    for (const tagKey of Object.keys(element.tags)) {\r\n      row[tagKey] = element.tags[tagKey];\r\n    }\r\n    rows.push(row);\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\nfunction NewRow(keys) {\r\n  return Object.fromEntries(keys.map((k) => [k, null]));\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\"; // AG Grid Component\r\nimport \"ag-grid-community/styles/ag-grid.css\"; // Mandatory CSS required by the grid\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\"; // Optional Theme applied to the grid\r\nimport { DEFAULT_HEIGHT, DEFAULT_WIDTH } from \"./constants\";\r\nimport { GetTaggedData, GetTagKeys, GetRowsFromTaggedData } from \"./utils\";\r\n\r\nconst DataTable = ({ data }) => {\r\n  const [height, setHeight] = useState(DEFAULT_HEIGHT);\r\n  const [width, setWidth] = useState(DEFAULT_WIDTH);\r\n\r\n  const taggedData = GetTaggedData(data);\r\n  const tagKeys = GetTagKeys(taggedData);\r\n\r\n  const [rowData, setRowData] = useState(\r\n    GetRowsFromTaggedData(tagKeys, taggedData)\r\n  );\r\n  const [colDefs, setColDefs] = useState(\r\n    tagKeys.map((key) => {\r\n      return { field: key };\r\n    })\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"ag-theme-quartz\" // applying the grid theme\r\n      style={{ height: height, width: width, resize: \"both\" }}\r\n    >\r\n      <AgGridReact rowData={rowData} columnDefs={colDefs} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n","export const DEFAULT_HEIGHT = 500;\r\nexport const DEFAULT_WIDTH = 900;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ReactMapboxGl from \"react-mapbox-gl\";\r\nimport DrawControl from \"react-mapbox-gl-draw\";\r\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\r\nimport FetchPolygonData from \"../../utils/FetchPolygonData\";\r\nimport { ACCESS_TOKEN } from \"../../constants\";\r\nimport { GetURLVariable } from \"../../utils/urlVariableUtils\";\r\nimport Draggable from \"react-draggable\";\r\nimport \"./style.css\";\r\nimport DataTable from \"../DataTable/Table\";\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken: GetURLVariable(ACCESS_TOKEN),\r\n});\r\n\r\nexport const MapContainer = () => {\r\n  const [promisedData, setPromisedData] = useState(null);\r\n  const [dataLoading, setDataLoading] = useState(false);\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!!promisedData) {\r\n      const getData = async () => {\r\n        const data = await promisedData;\r\n        setPromisedData(null);\r\n        setDataLoading(false);\r\n        setData(data);\r\n      };\r\n\r\n      getData();\r\n    }\r\n  }, [promisedData]);\r\n\r\n  const onDrawCreate = ({ features }) => {\r\n    const polygon = features[0].geometry.coordinates[0].map((coords) => {\r\n      return { lat: coords[1], lng: coords[0] };\r\n    });\r\n    setPromisedData(FetchPolygonData(polygon));\r\n    setDataLoading(true);\r\n    //console.log(\"onDrawCreate\");\r\n  };\r\n\r\n  const onDrawUpdate = ({ features }) => {\r\n    //console.log(\"onDrawUpdate\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {(!!data || dataLoading) && (\r\n        <Draggable className=\"draggable\">\r\n          <div className=\"box\">\r\n            {dataLoading ? (\r\n              <div style={{ padding: \"5px\" }}>Loading data...</div>\r\n            ) : (\r\n              <DataTable data={data} />\r\n            )}\r\n          </div>\r\n        </Draggable>\r\n      )}\r\n      <Map\r\n        style=\"mapbox://styles/mapbox/streets-v9\" // eslint-disable-line\r\n        containerStyle={{\r\n          height: \"100vh\",\r\n          width: \"100vw\",\r\n        }}\r\n      >\r\n        <DrawControl\r\n          onDrawCreate={onDrawCreate}\r\n          onDrawUpdate={onDrawUpdate}\r\n          controls={{\r\n            point: false,\r\n            line_string: false,\r\n            polygon: true,\r\n            trash: true,\r\n            combine_features: false,\r\n            uncombine_features: false,\r\n          }}\r\n          onDrawModeChange={(e) => {}}\r\n        />\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n","async function validateToken(token) {\r\n  const response = await sendApiRequest(constructURL(\"example\", token));\r\n  return response.number !== 401;\r\n}\r\n\r\nasync function sendApiRequest(url) {\r\n  const response = await fetch(url);\r\n  const data = response.json();\r\n  const number = response.status;\r\n  return { data, number };\r\n}\r\n\r\nfunction constructURL(username, accessToken) {\r\n  const url = `https://api.mapbox.com/styles/v1/${username}?access_token=${accessToken}`;\r\n  return url;\r\n}\r\n\r\nexport default validateToken;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./style.css\";\r\nimport { SetURLVariable } from \"../../utils/urlVariableUtils\";\r\nimport { ACCESS_TOKEN } from \"../../constants\";\r\nimport validateToken from \"../../utils/ValidateToken\";\r\nimport DataTable from \"../DataTable/Table\";\r\n\r\nexport const TokenInput = () => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const getValidity = async () => {\r\n      const tokenValid = await validateToken(value);\r\n      if (tokenValid) {\r\n        SetURLVariable(ACCESS_TOKEN, value);\r\n      }\r\n    };\r\n\r\n    getValidity();\r\n  }, [value]);\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"tokenInputDiv\">\r\n      <form className=\"form\">\r\n        <label className=\"label\" htmlFor=\"text-input\">\r\n          Enter Mapbox Access Token:\r\n        </label>\r\n        <br /> <br />\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          id=\"text-input\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\r\nimport { MapContainer } from \"./components/MapContainer/MapContainer\";\r\nimport \"./style.css\";\r\nimport { TokenInput } from \"./components/AccessTokenCheck/AccessTokenCheck\";\r\nimport { GetURLVariable } from \"./utils/urlVariableUtils\";\r\nimport { ACCESS_TOKEN } from \"./constants\";\r\nimport validateToken from \"./utils/ValidateToken\";\r\n\r\nfunction App() {\r\n  const [tokenValid, setTokenValid] = useState(false);\r\n  const accessToken = GetURLVariable(ACCESS_TOKEN);\r\n\r\n  useEffect(() => {\r\n    const getValidity = async () => {\r\n      const tokenValidResult = await validateToken(accessToken);\r\n      setTokenValid(tokenValidResult);\r\n    };\r\n\r\n    getValidity();\r\n  }, [accessToken]);\r\n\r\n  return tokenValid ? <MapContainer /> : <TokenInput />;\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}